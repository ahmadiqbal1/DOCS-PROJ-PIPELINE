# -*- coding: utf-8 -*-

"""
managementservice

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from managementservice.decorators import lazy_property
from managementservice.configuration import Configuration
from managementservice.configuration import Environment
from managementservice.controllers.documentation_controller\
    import DocumentationController
from managementservice.controllers.project_controller import ProjectController
from managementservice.controllers.pipeline_instance_controller\
    import PipelineInstanceController
from managementservice.controllers.templates_and_user_authorization_controller\
    import TemplatesAndUserAuthorizationController


class ManagementserviceClient(object):

    @lazy_property
    def documentation(self):
        return DocumentationController(self.config)

    @lazy_property
    def project(self):
        return ProjectController(self.config)

    @lazy_property
    def pipeline_instance(self):
        return PipelineInstanceController(self.config)

    @lazy_property
    def templates_and_user_authorization(self):
        return TemplatesAndUserAuthorizationController(self.config)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=[408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
                 retry_methods=['GET', 'PUT'],
                 environment=Environment.PRODUCTION,
                 mlfm_siemens_local='mlfm.siemens.local', config=None):
        if config is None:
            self.config = Configuration(
                                         http_client_instance=http_client_instance,
                                         override_http_client_configuration=override_http_client_configuration,
                                         http_call_back=http_call_back,
                                         timeout=timeout,
                                         max_retries=max_retries,
                                         backoff_factor=backoff_factor,
                                         retry_statuses=retry_statuses,
                                         retry_methods=retry_methods,
                                         environment=environment,
                                         mlfm_siemens_local=mlfm_siemens_local)
        else:
            self.config = config


