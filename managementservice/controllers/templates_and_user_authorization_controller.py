# -*- coding: utf-8 -*-

"""
managementservice

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from managementservice.api_helper import APIHelper
from managementservice.configuration import Server
from managementservice.controllers.base_controller import BaseController
from managementservice.models.template_dto import TemplateDto
from managementservice.models.authorized_user_dto import AuthorizedUserDto


class TemplatesAndUserAuthorizationController(BaseController):

    """A Controller to access Endpoints in the managementservice API."""
    def __init__(self, config):
        super(TemplatesAndUserAuthorizationController, self).__init__(config)

    def template_accessibility_controller_add_new_template(self,
                                                           template_type,
                                                           body):
        """Does a POST request to /mgmt/v1/template.

        TODO: type endpoint description here.

        Args:
            template_type (string): TODO: type description here.
            body (CreateTemplateDto): TODO: type description here.

        Returns:
            TemplateDto: Response from the API. The record has been
                successfully created.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/template'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'Template_Type': template_type
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, TemplateDto.from_dictionary)

        return decoded

    def template_accessibility_controller_edit_template_permissions(self,
                                                                    template_id,
                                                                    access_modifier):
        """Does a PUT request to /mgmt/v1/template/{templateId}.

        TODO: type endpoint description here.

        Args:
            template_id (string): TODO: type description here.
            access_modifier (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/template/{templateId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'templateId': {'value': template_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'AccessModifier': access_modifier
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def template_accessibility_controller_delete_template(self,
                                                          template_id):
        """Does a DELETE request to /mgmt/v1/template/{templateId}.

        TODO: type endpoint description here.

        Args:
            template_id (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/template/{templateId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'templateId': {'value': template_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def template_accessibility_controller_give_access_permission_by_template_id(self,
                                                                                template_id,
                                                                                body):
        """Does a POST request to /mgmt/v1/template/{templateId}/users.

        TODO: type endpoint description here.

        Args:
            template_id (string): TODO: type description here.
            body (list of string): TODO: type description here.

        Returns:
            AuthorizedUserDto: Response from the API. The record has been
                successfully created.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/template/{templateId}/users'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'templateId': {'value': template_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, AuthorizedUserDto.from_dictionary)

        return decoded

    def template_accessibility_controller_get_all_auth_users(self,
                                                             template_id):
        """Does a GET request to /mgmt/v1/template/{templateId}/users.

        TODO: type endpoint description here.

        Args:
            template_id (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/template/{templateId}/users'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'templateId': {'value': template_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def template_accessibility_controller_get_allpublic_pipelines(self):
        """Does a GET request to /mgmt/v1/template/public-pipelines.

        TODO: type endpoint description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/template/public-pipelines'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def template_accessibility_controller_get_templates_by_user_id(self,
                                                                   user_id,
                                                                   template_type):
        """Does a GET request to /mgmt/v1/template/user/{userId}/templates.

        TODO: type endpoint description here.

        Args:
            user_id (string): TODO: type description here.
            template_type (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/template/user/{userId}/templates'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'userId': {'value': user_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'Template_Type': template_type
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def template_accessibility_controller_get_pipelines_details(self,
                                                                ids=None):
        """Does a GET request to /mgmt/v1/template/pipelines/details.

        TODO: type endpoint description here.

        Args:
            ids (list of string, optional): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/template/pipelines/details'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'ids': ids
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def template_accessibility_controller_get_plugins_details(self,
                                                              with_config,
                                                              ids=None):
        """Does a GET request to /mgmt/v1/template/plugins/details.

        TODO: type endpoint description here.

        Args:
            with_config (bool): TODO: type description here.
            ids (list of string, optional): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/template/plugins/details'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'withConfig': with_config,
            'ids': ids
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def template_accessibility_controller_get_template_details(self,
                                                               user_id,
                                                               template_type):
        """Does a GET request to /mgmt/v1/template/details/user/{userId}.

        TODO: type endpoint description here.

        Args:
            user_id (string): TODO: type description here.
            template_type (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/template/details/user/{userId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'userId': {'value': user_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'Template_Type': template_type
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def template_accessibility_controller_get_template_statistcs(self,
                                                                 user_id):
        """Does a GET request to /mgmt/v1/template/user/{userId}/templates/statistics.

        TODO: type endpoint description here.

        Args:
            user_id (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/template/user/{userId}/templates/statistics'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'userId': {'value': user_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def template_accessibility_controller_delete_user(self,
                                                      template_id,
                                                      user_id):
        """Does a DELETE request to /mgmt/v1/template/{templateId}/users/{userId}.

        TODO: type endpoint description here.

        Args:
            template_id (string): TODO: type description here.
            user_id (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/template/{templateId}/users/{userId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'templateId': {'value': template_id, 'encode': True},
            'userId': {'value': user_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)
