# -*- coding: utf-8 -*-

"""
managementservice

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from managementservice.api_helper import APIHelper
from managementservice.configuration import Server
from managementservice.controllers.base_controller import BaseController
from managementservice.models.project_member_dto import ProjectMemberDto
from managementservice.models.project_dto import ProjectDto


class ProjectController(BaseController):

    """A Controller to access Endpoints in the managementservice API."""
    def __init__(self, config):
        super(ProjectController, self).__init__(config)

    def project_controller_add_new_project_member(self,
                                                  body):
        """Does a POST request to /mgmt/v1/project/member.

        TODO: type endpoint description here.

        Args:
            body (CreateProjectMemberDto): TODO: type description here.

        Returns:
            ProjectMemberDto: Response from the API. The record has been
                successfully created.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/project/member'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ProjectMemberDto.from_dictionary)

        return decoded

    def project_controller_add_new_project(self,
                                           body):
        """Does a POST request to /mgmt/v1/project.

        TODO: type endpoint description here.

        Args:
            body (CreateProjectDto): TODO: type description here.

        Returns:
            ProjectDto: Response from the API. The record has been
                successfully created.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/project'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = APIHelper.json_deserialize(_response.text, ProjectDto.from_dictionary)

        return decoded

    def project_controller_edit_project(self,
                                        project_id,
                                        body):
        """Does a PUT request to /mgmt/v1/project/{projectId}.

        TODO: type endpoint description here.

        Args:
            project_id (string): TODO: type description here.
            body (UpdateProjectDto): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/project/{projectId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'projectId': {'value': project_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def project_controller_get_project_by_owner_id(self,
                                                   id):
        """Does a GET request to /mgmt/v1/project/owner/{id}/projects.

        TODO: type endpoint description here.

        Args:
            id (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/project/owner/{id}/projects'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def project_controller_get_pipelines_count_by_project_id(self,
                                                             id):
        """Does a GET request to /mgmt/v1/project/{id}/pipelines/count.

        TODO: type endpoint description here.

        Args:
            id (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/project/{id}/pipelines/count'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def project_controller_find_all_pipelines_by_project_id(self,
                                                            id):
        """Does a GET request to /mgmt/v1/project/{id}/pipelines.

        TODO: type endpoint description here.

        Args:
            id (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/project/{id}/pipelines'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def project_controller_get_project_statistics(self,
                                                  id):
        """Does a GET request to /mgmt/v1/project/{id}/statistics.

        TODO: type endpoint description here.

        Args:
            id (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/project/{id}/statistics'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def project_controller_get_all_project_statistics(self,
                                                      id):
        """Does a GET request to /mgmt/v1/project/user/{id}/projects/statistics.

        TODO: type endpoint description here.

        Args:
            id (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/project/user/{id}/projects/statistics'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def project_controller_get_project_by_user_idand_project_id(self,
                                                                user_id,
                                                                project_id):
        """Does a GET request to /mgmt/v1/project/user/{userId}/project/{projectId}.

        TODO: type endpoint description here.

        Args:
            user_id (string): TODO: type description here.
            project_id (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/project/user/{userId}/project/{projectId}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'userId': {'value': user_id, 'encode': True},
            'projectId': {'value': project_id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def project_controller_delete_project_member(self,
                                                 id):
        """Does a DELETE request to /mgmt/v1/project/member/{id}.

        TODO: type endpoint description here.

        Args:
            id (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/project/member/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)

    def project_controller_delete_project(self,
                                          id):
        """Does a DELETE request to /mgmt/v1/project/{id}.

        TODO: type endpoint description here.

        Args:
            id (string): TODO: type description here.

        Returns:
            void: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mgmt/v1/project/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare and execute request
        _request = self.config.http_client.delete(_query_url)
        _response = self.execute_request(_request)
        self.validate_response(_response)
