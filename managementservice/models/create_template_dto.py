# -*- coding: utf-8 -*-

"""
managementservice

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from managementservice.api_helper import APIHelper


class CreateTemplateDto(object):

    """Implementation of the 'CreateTemplateDto' model.

    TODO: type model description here.

    Attributes:
        template_id (string): TODO: type description here.
        owner_id (string): TODO: type description here.
        accessibility (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "template_id": 'templateId',
        "owner_id": 'ownerId',
        "accessibility": 'accessibility'
    }

    _optionals = [
        'template_id',
        'owner_id',
        'accessibility',
    ]

    def __init__(self,
                 template_id=APIHelper.SKIP,
                 owner_id=APIHelper.SKIP,
                 accessibility=APIHelper.SKIP):
        """Constructor for the CreateTemplateDto class"""

        # Initialize members of the class
        if template_id is not APIHelper.SKIP:
            self.template_id = template_id 
        if owner_id is not APIHelper.SKIP:
            self.owner_id = owner_id 
        if accessibility is not APIHelper.SKIP:
            self.accessibility = accessibility 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        template_id = dictionary.get("templateId") if dictionary.get("templateId") else APIHelper.SKIP
        owner_id = dictionary.get("ownerId") if dictionary.get("ownerId") else APIHelper.SKIP
        accessibility = dictionary.get("accessibility") if dictionary.get("accessibility") else APIHelper.SKIP
        # Return an object of this model
        return cls(template_id,
                   owner_id,
                   accessibility)
