# -*- coding: utf-8 -*-

"""
managementservice

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class ProjectMemberDto(object):

    """Implementation of the 'ProjectMemberDto' model.

    TODO: type model description here.

    Attributes:
        id (string): TODO: type description here.
        user_name (string): TODO: type description here.
        user_id (string): TODO: type description here.
        project_id (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "user_name": 'userName',
        "user_id": 'userId',
        "project_id": 'projectId'
    }

    def __init__(self,
                 id=None,
                 user_name=None,
                 user_id=None,
                 project_id=None):
        """Constructor for the ProjectMemberDto class"""

        # Initialize members of the class
        self.id = id 
        self.user_name = user_name 
        self.user_id = user_id 
        self.project_id = project_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        id = dictionary.get("id") if dictionary.get("id") else None
        user_name = dictionary.get("userName") if dictionary.get("userName") else None
        user_id = dictionary.get("userId") if dictionary.get("userId") else None
        project_id = dictionary.get("projectId") if dictionary.get("projectId") else None
        # Return an object of this model
        return cls(id,
                   user_name,
                   user_id,
                   project_id)
